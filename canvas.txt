# random canvas fingerprint
randomcanvas.js application/javascript
(function() {
	const domLoaded = (fn) => document.readyState != 'loading'?
    	fn(): document.addEventListener('DOMContentLoaded', fn)
	function randomRGBA() {
	    const clr = () => Math.round(Math.random()*255)
	    return `rgba(${clr()},${clr()},${clr()},${Math.random().toFixed(1)})`
	}
	function randomFont() {
		const fontFamily = [
		  'Arial','Arial Black','Arial Narrow','Courier','Courier New','Georgia','Helvetica',
		  'Impact','Lucida Console','monospace','Tahoma','Times','Times New Roman','Verdana'
		]
		const fontSize = Math.floor((Math.random() * 100) + 12)
		const rand = Math.floor(Math.random()*fontFamily.length)
		return `${fontSize}px '${fontFamily[rand]}'`
	}
	const canvas = window.document.createElement('canvas')
	const txt = '🚀 Private'
	const context = canvas.getContext('2d')
	context.textBaseline = 'top'
	context.textBaseline = 'alphabetic'
	context.font = randomFont()
	context.fillStyle = randomRGBA()
	context.fillRect(125, 1, 62, 20)
	context.font = randomFont()
	context.fillStyle = randomRGBA()
	context.fillText(txt, 2, 15)
	context.font = randomFont()
	context.fillStyle = randomRGBA()
	context.fillText(txt, 4, 17)
	context.font = randomFont()
	const newDataURI = canvas.toDataURL()
	const cachedData = function(newDataURI) {
		return (typeOfAttempt='') => () => {
			console.warn(`🐳 ${typeOfAttempt}HTMLCanvasElement.toDataURL accessed: ${newDataURI}`)
			return newDataURI
		}
	}
	const randomcanvas = cachedData(newDataURI)
	function redefine(root, type='') {
		Object.defineProperties(root.HTMLCanvasElement.prototype, { 'toDataURL':  { value: randomcanvas(type) } })
	}
	redefine(window)
	domLoaded(() => {
		;[...document.getElementsByTagName('iframe')].forEach(frame => redefine(frame.contentWindow, '😡 Aggressive - '))	
	})
})()
