# detect fingerprinting
detectfp.js application/javascript
(function() {
	// helpers
	const itemInList = (list, item) => list.indexOf(item) > -1
	const domLoaded = (fn) => document.readyState != 'loading'?
		fn(): document.addEventListener('DOMContentLoaded', fn)
	// structs
	const navigatorProps = {
		appVersion: navigator.appVersion,
		appCodeName: navigator.appCodeName,
		deviceMemory: navigator.deviceMemory,
		doNotTrack: navigator.doNotTrack,
		hardwareConcurrency: navigator.hardwareConcurrency,
		languages: navigator.languages,
		maxTouchPoints: navigator.maxTouchPoints,
		mimeTypes: navigator.mimeTypes,
		platform: navigator.platform,
		plugins: navigator.plugins,
		userAgent: navigator.userAgent,
		vendor: navigator.vendor
	}
	const screenProps = {
		width: screen.width,
		height: screen.height,
		availWidth: screen.availWidth,
		availHeight: screen.availHeight,
		availTop: screen.availTop,
		availLeft: screen.availLeft,
		colorDepth: screen.colorDepth,
		pixelDepth: screen.pixelDepth
	}
	const dateProps = {
		getTimezoneOffset: Date.prototype.getTimezoneOffset
	}
	const intlProps = {
		resolvedOptions: Intl.DateTimeFormat.prototype.resolvedOptions
	}
	const webglProps = {
		shaderSource: WebGLRenderingContext.prototype.shaderSource
	}
	const canvasProps = {
		toDataURL: HTMLCanvasElement.prototype.toDataURL,
		toBlob: HTMLCanvasElement.prototype.toBlob
	}
	const canvasContextProps = {
		getImageData: CanvasRenderingContext2D.prototype.getImageData
	}
	const audioProps = {
		createAnalyser: AudioContext.prototype.createAnalyser,
		createOscillator: AudioContext.prototype.createOscillator,
	}
	const queryAPI = 'https://developer.mozilla.org/en-US/search?q='
	// API with Ranking per Unique Impact and Longterm State
	const propAPI = {
		appVersion: ['navigator.appVersion', 3],
		appCodeName: ['navigator.appCodeName', 1],
		deviceMemory: ['navigator.deviceMemory', 1],
		doNotTrack: ['navigator.doNotTrack', 1],
		hardwareConcurrency: ['navigator.hardwareConcurrency', 1],
		languages: ['navigator.languages', 1],
		maxTouchPoints: ['navigator.maxTouchPoints', 1],
		mimeTypes: ['navigator.mimeTypes', 2],
		platform: ['navigator.platform', 2],
		plugins: ['navigator.plugins', 2],
		userAgent: ['navigator.userAgent', 3],
		vendor: ['navigator.vendor', 2],
		width: ['screen.width', 1],
		height: ['screen.height', 1],
		availWidth: ['screen.availWidth', 1],
		availHeight: ['screen.availHeight', 1],
		availTop: ['screen.availTop', 1],
		availLeft: ['screen.availLeft', 1],
		colorDepth: ['screen.colorDepth', 1],
		pixelDepth: ['screen.pixelDepth', 1],
		getTimezoneOffset: ['Date.prototype.getTimezoneOffset', 2],
		resolvedOptions: ['Intl.DateTimeFormat.prototype.resolvedOptions', 2],
		shaderSource: ['WebGLRenderingContext.prototype.shaderSource', 6],
		toDataURL: ['HTMLCanvasElement.prototype.toDataURL', 6],
		toBlob: ['HTMLCanvasElement.prototype.toBlob', 6],
		getImageData: ['CanvasRenderingContext2D.prototype.getImageData', 6],
		createAnalyser: ['AudioContext.prototype.createAnalyser', 6],
		createOscillator: ['AudioContext.prototype.createOscillator', 6]
	}
	// watcher
	let rankCounter = 0
	let watching = true
	const fingerprintingRank = 6
	const propsRead = []
	const propsReadAll = {}
	const watch = (prop, type) => {
		const propDescription = propAPI[prop][0]
		const propRank = propAPI[prop][1]
		const trace = () => {
			console.groupCollapsed(`🕷Script read ${propDescription}`)
			console.log(`API REFERENCE: ${queryAPI+propDescription}`)
			console.log('Tracing the source...')
			console.trace(document.currentScript?document.currentScript.src:'')
			console.groupEnd()
		}
		const newPropRead = !itemInList(propsRead, propDescription)
		propsReadAll[propDescription]? propsReadAll[propDescription]++: propsReadAll[propDescription]=1
		if (newPropRead) {
			rankCounter += propRank
			propsRead.push(propDescription)
			traceSource = true
		}
		// counter types
		if (watching && rankCounter >= fingerprintingRank) {
			const warnStyle = `color:green;border:2px solid green;font-weight:bold;padding:5px;`
			console.warn(`%c⚔️${type}Finterprinting detected!`, warnStyle)
			console.groupCollapsed(`📔 Finterprinting stats`)
			console.log(`Total properties read: `, propsRead)
			console.log(`Total reads per property: `, propsReadAll)
			console.groupEnd()
			watching = false
		}
		return newPropRead? trace: ()=>{}
	}
	// difinify
	function definify(struct, type) {
		const redefinedProps = {}
		Object.keys(struct).forEach(prop => {
			redefinedProps[prop] = { get: () => { watch(prop, type)(); return struct[prop] } }
		})
		return redefinedProps
	}
	function redefine(root, typeOfAttempt = '') {
		Object.defineProperties(root.navigator, definify(navigatorProps, typeOfAttempt))
		Object.defineProperties(root.screen, definify(screenProps, typeOfAttempt))
		Object.defineProperties(root.Date.prototype, definify(dateProps, typeOfAttempt))
		Object.defineProperties(root.Intl.DateTimeFormat.prototype, definify(intlProps, typeOfAttempt))
		Object.defineProperties(root.WebGLRenderingContext.prototype, definify(webglProps, typeOfAttempt))
		Object.defineProperties(root.HTMLCanvasElement.prototype, definify(canvasProps, typeOfAttempt))
		Object.defineProperties(root.CanvasRenderingContext2D.prototype, definify(canvasContextProps, typeOfAttempt))
		Object.defineProperties(root.AudioContext.prototype, definify(audioProps, typeOfAttempt))
	}
	redefine(window)
	//domLoaded(() => {
		;[...document.getElementsByTagName('iframe')].forEach(frame => redefine(frame.contentWindow, '😡 Aggressive - '))	
	})
})()
