(function() {
	function randomRGBA() {
	    const clr = () => Math.round(Math.random()*255)
	    return `rgba(${clr()},${clr()},${clr()},${Math.random().toFixed(1)})`
	}
	const canvas = window.document.createElement('canvas')
	const txt = '💩 Private'
	const context = canvas.getContext('2d')
	context.textBaseline = 'top'
	context.font = "14px 'Arial'"
	context.textBaseline = 'alphabetic'
	context.fillStyle = randomRGBA()
	context.fillRect(125, 1, 62, 20)
	context.fillStyle = randomRGBA()
	context.fillText(txt, 2, 15)
	context.fillStyle = randomRGBA()
	context.fillText(txt, 4, 17)
	const newDataURI = canvas.toDataURL()
	const cachedData = function(newDataURI) {
		return (typeOfAttempt = '') => () => {
			console.warn(`🐳 ${typeOfAttempt}HTMLCanvasElement.toDataURL accessed: ${newDataURI}`)
			return newDataURI
		}
	}
	const randomcanvas = cachedData(newDataURI)
	function redefine(root, type='') {
		Object.defineProperties(root.HTMLCanvasElement.prototype, { 'toDataURL':  { value: randomcanvas(type) } })
	}
	redefine(window)
	;[...document.getElementsByTagName('iframe')].forEach(frame => redefine(frame.contentWindow, '😡 Aggressive - '))
})();

# spoof timezone fingerprint
spooftimezone.js application/javascript
(function() {
	function cachedOptions () {
		const options = Intl.DateTimeFormat().resolvedOptions()
		return function() { return options }
	}
	const getOptions = cachedOptions()
	function redefine(root, typeOfAttempt = '') {
		Object.defineProperties(
			root.Date.prototype,
			{
				'getTimezoneOffset':  {
					value: () => {
						console.warn(`🐠 ${typeOfAttempt}Date.getTimezoneOffset accessed`)
						return 0	
					}
				}
			}
		)
		Object.defineProperties(
			root.Intl.DateTimeFormat.prototype,
			{
				'resolvedOptions':  {
					value: () => {
						const options = getOptions()
						options.timeZone = 'UTC'
						console.warn(`🐠 ${typeOfAttempt}Intl.DateTimeFormat.resolvedOptions accessed`)
						return options
					}
				}
			}
		)
	}
	// Handle window
	redefine(window)
	// Handle iframes
	;[...document.getElementsByTagName('iframe')].forEach(iframe => {
		redefine(iframe.contentWindow, '😡 Aggressive - ')
	})
})()
