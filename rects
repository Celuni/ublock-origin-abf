(function() {
console.log('computing...')
const hashy = str => {
  	let i, len, hash = 0x811c9dc5
	for(i = 0, len = str.length; i < len; i++) {
		hash = Math.imul(31, hash) + str.charCodeAt(i)|0
    }
	return ("0000000" + (hash >>> 0).toString(16)).substr(-8)
}
//-------------------------
const domLoaded = (fn) => document.readyState != 'loading'?
	fn(): document.addEventListener('DOMContentLoaded', fn)
console.log('step2...')
const computeRandomClientRects = (oldRects, isBounding) => {
	console.log('computing random...')
    const offset = Math.floor(Math.random()*100)/100
    const computeOffset = (isBounding, x) => x + (isBounding? Math.round(offset): offset)
	const client = isBounding? oldRects: new DOMRect()
    client.top = computeOffset(isBounding, oldRects.top)
    client.right = computeOffset(isBounding, oldRects.right)
    client.bottom = computeOffset(isBounding, oldRects.bottom)
    client.left = computeOffset(isBounding, oldRects.left)
    client.width = computeOffset(isBounding, oldRects.width)
    client.height = computeOffset(isBounding, oldRects.height)
    client.x = computeOffset(isBounding, oldRects.x)
    client.y = computeOffset(isBounding, oldRects.y)
 	return client
}
console.log('step3...')
function randomBoundingClientRect() {
	console.log('caching boundingClientRect...')
	const boundingClientRect = Element.prototype.getBoundingClientRect
	const oldRect = boundingClientRect.apply(this, arguments) 
	//if (this === undefined || this === null) return oldRect // ????
	return computeRandomClientRects(oldRect, true)
}

console.log('step4...')
function randomClientRect() {
	onsole.log('caching ClientRect...')
	const clientRects = Element.prototype.getClientRects
	const oldRects = clientRects.apply(this, arguments)
	const rectKeys = Object.keys(oldRects)
	const DOMRectList = () => {}
	const list = new DOMRectList()
	list.length = rectKeys.length
	for (let i = 0; i < list.length; i++){
		if (rectKeys[i] === 'length') { continue }
		list[i] = computeRandomClientRects(rects[rectKeys[i]], false)
	}
	return list
}
console.log('step5...')
function redefine(root) {
	console.log('redfining...')
	Object.defineProperties(
	    root.Range.prototype, {
	    	'getBoundingClientRect': { get: () => console.log('elBcr')/*randomBoundingClientRect()*/ }
	    }
	)
	Object.defineProperties(
	    root.Range.prototype, {
	    	'getClientRect': { get: () => console.log('elcr')/*randomClientRect()*/ }
	    }
	)
}
console.log('step6...')
redefine(window)
console.log('step7...')
domLoaded(() => {
	const iframes = [...document.getElementsByTagName('iframe')]
	console.log(iframes)
	iframes.forEach(frame => redefine(frame.contentWindow))	
})

})()
